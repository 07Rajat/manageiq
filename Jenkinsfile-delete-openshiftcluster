// pipeline {
//     agent any

//     parameters {
//         string(name: 'IBM_API_KEY', defaultValue: '', description: 'IBM Cloud API key')
//         string(name: 'REPO_URL', defaultValue: '', description: 'Git repository URL for Terraform code')
//     }
//     environment {
//         PATH = "${env.HOME}/bin:${env.PATH}" 
//     }


//             stages {
//                 stage('Checkout Code') {
//                     steps {
//                         checkout scm
//                     }
//                 }

//                 stage('Debug Workspace') {
//                     steps {
//                         sh '''
//                             echo "Current directory: $(pwd)"
//                             ls -lR
//                         '''
//                     }
//                 }
    
//                 stage('Install Terraform') {
//                     steps {
//                         script {
//                             sh '''
//                                 # Set the Terraform version
//                                 TERRAFORM_VERSION="1.5.0"  # Change this to the desired version

//                                 # Create a bin directory in the user's home directory
//                                 mkdir -p ${HOME}/bin

//                                 # Check if Terraform is already installed and is the correct version
//                                 if [ -f "${HOME}/bin/terraform" ]; then
//                                     CURRENT_VERSION=$(${HOME}/bin/terraform --version | head -n 1 | cut -d ' ' -f 2 | cut -d 'v' -f 2)
//                                     if [ "${CURRENT_VERSION}" == "${TERRAFORM_VERSION}" ]; then
//                                         echo "Terraform ${TERRAFORM_VERSION} is already installed."
//                                     else
//                                         echo "Updating Terraform to version ${TERRAFORM_VERSION}..."
//                                         # Download and install Terraform
//                                         cd ${HOME}/bin
//                                         wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
//                                         unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip  # Force overwrite
//                                         rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
//                                     fi
//                                 else
//                                     echo "Installing Terraform ${TERRAFORM_VERSION}..."
//                                     # Download and install Terraform
//                                     cd ${HOME}/bin
//                                     wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
//                                     unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip  # Force overwrite
//                                     rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
//                                 fi

//                                 # Add the bin directory to PATH
//                                 echo 'export PATH=${HOME}/bin:${PATH}' >> ${HOME}/.bashrc
//                                 source ${HOME}/.bashrc

//                                 # Verify installation
//                                 echo "PATH: ${PATH}"
//                                 which terraform
//                                 terraform --version
//                             '''
//                         }
//                     }
//                 }

//              stage('Initialize Terraform Providers') {
//                 steps {
//                     script {
//                             sh '''
//                                 # Navigate to the Terraform directory
//                                 cd terraform-repo/ibm-cloud

//                                 # Initialize Terraform (this will download the required providers)
//                                 terraform init
//                             '''
//                     }
//                 }
//             }


//             stage('Run Delete Cluster Script') {
//                 steps {
//                     script {
//                             sh """
//                             chmod +x ./manageiq-jobs/scripts/delete-openshift-cluster.sh
//                             """
//                     }
//                 }
//              }
//     }

//     post {
//         success {
//             echo "Cluster deletion completed successfully!"
//         }
//         failure {
//             echo "Cluster deletion failed. Check the logs for details."
//         }
//     }
// }

pipeline {
    agent any

    parameters {
        string(name: 'IBM_API_KEY', defaultValue: '', description: 'IBM Cloud API key')
        string(name: 'TEAM_NAME', defaultValue: '', description: 'Enter the Team Name')
        string(name: 'DB_NAME', defaultValue: '', description: 'Enter the Database Name')
        string(name: 'MongoURL', defaultValue: '', description: 'Enter the MongoDB URL')
        string(name: 'REQUESTED_CPU', defaultValue: '', description: 'Requested CPU')
        string(name: 'REQUESTED_MEMORY', defaultValue: '', description: 'Requested Memory (GB)')
    }

    environment {
        PATH = "${env.HOME}/bin:${env.PATH}"
        PYTHON_PATH = "${env.HOME}/.local/bin" // Path for user-installed Python packages
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    dir('manageiq') {
                        sh '''
                            git init
                            if git remote | grep -q origin; then
                                git remote set-url origin https://github.com/07Rajat/manageiq.git
                            else
                                git remote add origin https://github.com/07Rajat/manageiq.git
                            fi
                            git fetch origin rn_clustercreation
                            git checkout -B rn_clustercreation origin/rn_clustercreation
                        '''
                    }

                    dir('terraform-repo') {
                        sh '''
                            git init
                            if git remote | grep -q origin; then
                                git remote set-url origin https://github.com/07Rajat/terraform-repo.git
                            else
                                git remote add origin https://github.com/07Rajat/terraform-repo.git
                            fi
                            git fetch origin master
                            git checkout -B master origin/master
                        '''
                    }
                }
            }
        }

        stage('Fetch Resource Allocation') {
            steps {
                script {
                    def teamName = params.TEAM_NAME
                    def requestedCPU = params.REQUESTED_CPU.toInteger()
                    def requestedMemory = params.REQUESTED_MEMORY.toInteger()

                    // Fetch allocated resources using python3 directly from the manageiq repository
                    dir('manageiq') {
                        def fetchOutput = sh(
                            script: "python3 ./manageiq-jobs/scripts/fetch_resources.py '${params.DB_NAME}' '${teamName}' '${params.MongoURL}'",
                            returnStdout: true
                        ).trim()

                        echo "Fetch output: ${fetchOutput}"

                        // Check if fetchOutput is empty
                        if (!fetchOutput?.trim()) {
                            error "Error: Fetch output is empty. Check if the script executed correctly."
                        }

                        // Parse JSON output
                        try {
                            def resourceData = readJSON(text: fetchOutput)

                            // Debug JSON output
                            echo "Resource Data: ${resourceData}"
                            echo "Allocated CPU: ${resourceData.allocated_cpu}, Type: ${resourceData.allocated_cpu.getClass()}"
                            echo "Allocated Memory: ${resourceData.allocated_memory_gb}, Type: ${resourceData.allocated_memory_gb.getClass()}"

                            // Check for errors in the response
                            if (resourceData.containsKey('error')) {
                                error "Error: ${resourceData.error}"
                            }

                            // Validate and convert allocated_cpu and allocated_memory_gb
                            def allocatedCPU = resourceData.allocated_cpu
                            def allocatedMemory = resourceData.allocated_memory_gb

                            if (allocatedCPU == null || !allocatedCPU.toString().isNumber()) {
                                error "Error: allocated_cpu is not a valid number."
                            }
                            if (allocatedMemory == null || !allocatedMemory.toString().isNumber()) {
                                error "Error: allocated_memory_gb is not a valid number."
                            }

                            // Convert to integers
                            allocatedCPU = allocatedCPU.toInteger()
                            allocatedMemory = allocatedMemory.toInteger()

                            // Store allocated resources in env for later stages (if needed)
                            env.ALLOCATED_CPU = allocatedCPU
                            env.ALLOCATED_MEMORY = allocatedMemory

                        } catch (Exception e) {
                            error "Error parsing JSON output: ${e.message}"
                        }
                    }
                }
            }
        }

        stage('Initialize Terraform Providers') {
            steps {
                script {
                    // Navigate to the terraform-repo directory and initialize Terraform
                    dir('terraform-repo/ibm-cloud') {
                        sh '''
                            # Initialize Terraform
                            terraform init
                        '''
                    }
                }
            }
        }

        stage('Run Delete Cluster Script') {
            steps {
                script {
                    // Debugging: Print the data types
                    echo "ALLOCATED_CPU type: ${env.ALLOCATED_CPU.getClass()}"
                    echo "REQUESTED_CPU type: ${params.REQUESTED_CPU.getClass()}"
                    echo "ALLOCATED_MEMORY type: ${env.ALLOCATED_MEMORY.getClass()}"
                    echo "REQUESTED_MEMORY type: ${params.REQUESTED_MEMORY.getClass()}"

                    // Convert to integers if necessary
                    def allocatedCPU = env.ALLOCATED_CPU.toInteger()
                    def requestedCPU = params.REQUESTED_CPU.toInteger()
                    def allocatedMemory = env.ALLOCATED_MEMORY.toInteger()
                    def requestedMemory = params.REQUESTED_MEMORY.toInteger()

                    // Debugging: Print the converted values
                    echo "ALLOCATED_CPU (converted): ${allocatedCPU}"
                    echo "REQUESTED_CPU (converted): ${requestedCPU}"
                    echo "ALLOCATED_MEMORY (converted): ${allocatedMemory}"
                    echo "REQUESTED_MEMORY (converted): ${requestedMemory}"

                    // Add the requested resources back to the allocated resources
                    def updatedCPU = allocatedCPU + requestedCPU
                    def updatedMemory = allocatedMemory + requestedMemory

                    // Debugging: Print the updated values
                    echo "Updated CPU: ${updatedCPU}"
                    echo "Updated Memory: ${updatedMemory}"

                    // Update MongoDB with the new resource allocation
                    dir('manageiq') {
                        def updateCommand = """
                            python3 ./manageiq-jobs/scripts/fetch_resources.py '${params.DB_NAME}' '${params.TEAM_NAME}' '${params.MongoURL}' delete ${requestedCPU} ${requestedMemory}
                        """
                        def updateOutput = sh(script: updateCommand, returnStdout: true).trim()
                        echo "Update output: ${updateOutput}"

                        // Check for errors
                        def updateResult = readJSON(text: updateOutput)
                        if (updateResult.containsKey('error')) {
                            error "Error updating MongoDB: ${updateResult.error}"
                        } else if (updateResult.containsKey('message')) {
                            echo "Successfully updated MongoDB: ${updateResult.message}"
                        } else {
                            error "Unexpected response from fetch_resources.py: ${updateOutput}"
                        }
                    }

                    // Call the delete-openshift-cluster.sh script
                    // dir('manageiq') {
                    //     sh """
                    //         chmod +x ./manageiq-jobs/scripts/delete-openshift-cluster.sh
                    //         ./manageiq-jobs/scripts/delete-openshift-cluster.sh --ibm-api-key ${params.IBM_API_KEY} --repo-url ${params.REPO_URL}
                    //     """
                    // }
                }
            }
        }
    }

    post {
        success {
            echo "Cluster deletion completed successfully!"
        }
        failure {
            echo "Cluster deletion failed. Check the logs for details."
        }
    }
}