pipeline {
    agent any

    parameters {
        string(name: 'IBM_API_KEY', defaultValue: '', description: 'IBM Cloud API key')
        string(name: 'REPO_URL', defaultValue: '', description: 'Git repository URL for Terraform code')
    }


            stages {
                stage('Checkout Code') {
                    steps {
                        checkout scm
                    }
                }
    
            stage('Install Terraform') {
                steps {
                    script {
                        // Install Terraform in a user-writable directory
                        sh '''
                            # Set the Terraform version
                            TERRAFORM_VERSION="1.5.0"
    
                            # Create a bin directory in the user's home directory
                            mkdir -p ${HOME}/bin
    
                            # Download and install Terraform
                            cd ${HOME}/bin
                            wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
    
                            # Add the bin directory to PATH
                            echo 'export PATH=${HOME}/bin:${PATH}' >> ${HOME}/.bashrc
                            source ${HOME}/.bashrc
    
                            # Verify installation
                            terraform --version
                        '''
                    }
                }
            }

            stage('Initialize Terraform Providers') {
                steps {
                    script {
                        sh '''
                            # Navigate to the Terraform directory
                            cd terraform-repo
    
                            # Initialize Terraform (this will download the required providers)
                            terraform init
                        '''
                    }
                }
            }

            stage('Run Delete Cluster Script') {
                steps {
                    script {
                        sh """
                        chmod +x ./manageiq-jobs/scripts/delete-openshift-cluster.sh
                        ./manageiq-jobs/scripts/delete-openshift-cluster.sh --ibm-api-key '${params.IBM_API_KEY}' --repo-url '${params.REPO_URL}'
                        """
                    }
                }
            }
    }

    post {
        success {
            echo "Cluster deletion completed successfully!"
        }
        failure {
            echo "Cluster deletion failed. Check the logs for details."
        }
    }
}