pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-agent
spec:
  containers:
  - name: jnlp
    image: 07rajat/openapi:v1
    tty: true
    command: ['cat']
    resources:
      requests:
        cpu: "300m"
        memory: "1Gi"
      limits:
        cpu: "100m"
        memory: "2Gi"
    env:
    - name: PATH
      value: "/opt/venv/bin:\$PATH"
    - name: LD_LIBRARY_PATH
      value: "/usr/local/lib:\$LD_LIBRARY_PATH"
    - name: CPATH
      value: "/usr/local/include:\$CPATH"
    - name: LIBRARY_PATH
      value: "/usr/local/lib:\$LIBRARY_PATH"
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  volumes:
  - name: workspace-volume
    emptyDir: {}
"""
        }
    }

    environment {
        PATH = "/opt/venv/bin:${env.PATH}"
        LD_LIBRARY_PATH = "/usr/local/lib:${env.LD_LIBRARY_PATH}"
        CPATH = "/usr/local/include:${env.CPATH}"
        LIBRARY_PATH = "/usr/local/lib:${env.LIBRARY_PATH}"
    }

    parameters {
        string(name: 'MONGODB_URI', defaultValue: '', description: 'MongoDB connection URI')
        string(name: 'DATABASE', defaultValue: '', description: 'MongoDB database name')
        string(name: 'COLLECTIONS', defaultValue: '', description: 'Comma-separated list of collections')
        string(name: 'OPENAI_API_KEY', defaultValue: '', description: 'OpenAI API key')
        string(name: 'EMAIL_FROM', defaultValue: '', description: 'Sender email address')
        string(name: 'EMAIL_PASSWORD', defaultValue: '', description: 'Sender email password')
        string(name: 'EMAIL_TO', defaultValue: '', description: 'Comma-separated list of recipient email addresses')
        string(name: 'REPORT_DIR', defaultValue: 'reports', description: 'Directory to save reports (default: "reports")')
        string(name: 'RATE_LIMIT_DELAY', defaultValue: '1', description: 'Rate limit delay in seconds (default: 1)')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch to checkout (default: main)')
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    echo "Checking out the repository..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${params.GIT_BRANCH}"]],
                        userRemoteConfigs: [[url: 'https://github.com/07Rajat/manageiq.git']]
                    ])
                }
            }
        }

        stage('Copy Scripts to Temporary Directory') {
            steps {
                script {
                    echo "Copying scripts to temporary directory..."
                    sh """
                        mkdir -p /tmp/scripts
                        cp ./manageiq-jobs/scripts/generate_report.py /tmp/scripts/
                        cp ./manageiq-jobs/scripts/send_report.py /tmp/scripts/
                    """
                }
            }
        }

        stage('Generate Reports') {
            steps {
                script {
                    echo "Generating reports..."
                    sh """
                        python3 /tmp/scripts/generate_report.py \
                        --mongodb_uri "${params.MONGODB_URI}" \
                        --database "${params.DATABASE}" \
                        --collections "${params.COLLECTIONS}" \
                        --openai_api_key "${params.OPENAI_API_KEY}" \
                        --report_dir "${params.REPORT_DIR}" \
                        --rate_limit_delay "${params.RATE_LIMIT_DELAY}"
                    """
                }
            }
        }

        stage('Send Email') {
            steps {
                script {
                    echo "Sending email with reports..."
                    sh """
                        python3 /tmp/scripts/send_report.py \
                        --email_from "${params.EMAIL_FROM}" \
                        --email_password "${params.EMAIL_PASSWORD}" \
                        --email_to "${params.EMAIL_TO}" \
                        --report_dir "${params.REPORT_DIR}"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Reports generated and email sent successfully!"
        }
        failure {
            echo "Failed to generate reports or send email. Check logs for errors."
        }
    }
}
