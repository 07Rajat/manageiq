pipeline {
    agent any

    environment {
        PATH = "${env.WORKSPACE}/venv/bin:${env.PATH}" // Add virtual environment to PATH
        LD_LIBRARY_PATH = "${WORKSPACE}/local/lib:${env.LD_LIBRARY_PATH}"
        CPATH = "${WORKSPACE}/local/include:${env.CPATH}"
        LIBRARY_PATH = "${WORKSPACE}/local/lib:${env.LIBRARY_PATH}"
    }

    parameters {
        string(name: 'MONGODB_URI', defaultValue: '', description: 'MongoDB connection URI')
        string(name: 'DATABASE', defaultValue: '', description: 'MongoDB database name')
        string(name: 'COLLECTIONS', defaultValue: '', description: 'Comma-separated list of collections')
        string(name: 'OPENAI_API_KEY', defaultValue: '', description: 'OpenAI API key')
        string(name: 'EMAIL_FROM', defaultValue: '', description: 'Sender email address')
        string(name: 'EMAIL_PASSWORD', defaultValue: '', description: 'Sender email password')
        string(name: 'EMAIL_TO', defaultValue: '', description: 'Comma-separated list of recipient email addresses')
        string(name: 'REPORT_DIR', defaultValue: 'reports', description: 'Directory to save reports (default: "reports")')
        string(name: 'RATE_LIMIT_DELAY', defaultValue: '1', description: 'Rate limit delay in seconds (default: 1)')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch to checkout (default: main)')
    }

    stages {
        stage('Checkout Repository') {
            steps {
                script {
                    echo "Checking out the repository..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${params.GIT_BRANCH}"]],
                        userRemoteConfigs: [[url: 'https://github.com/07Rajat/manageiq.git']]
                    ])
                }
            }
        }

        stage('Install System Dependencies') {
            steps {
                script {
                    echo "Installing system dependencies locally..."
                    sh '''
                        # Install CMake if not already installed
                        if ! command -v cmake &> /dev/null; then
                            echo "CMake not found. Installing CMake locally..."
                            
                            # Create a directory for CMake installation
                            mkdir -p ${WORKSPACE}/local/cmake
                            cd ${WORKSPACE}/local/cmake
        
                            # Download CMake source code
                            CMAKE_VERSION="3.26.4"  # Replace with the desired CMake version
                            wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz
                            tar -xvzf cmake-${CMAKE_VERSION}.tar.gz
                            cd cmake-${CMAKE_VERSION}
        
                            # Build and install CMake locally
                            ./bootstrap --prefix=${WORKSPACE}/local
                            make
                            make install
        
                            # Add CMake to PATH
                            export PATH=${WORKSPACE}/local/bin:${PATH}
        
                            # Verify CMake installation
                            cmake --version || { echo "CMake installation failed"; exit 1; }
                        fi
        
                        mkdir -p ${WORKSPACE}/local
                        cd ${WORKSPACE}
        
                        # Download and extract pre-built zlib binaries
                        wget https://www.zlib.net/fossils/zlib-1.2.11.tar.gz -O zlib-1.2.11.tar.gz
                        tar -xvzf zlib-1.2.11.tar.gz
                        cd zlib-1.2.11
        
                        # Set environment variables to use the pre-built zlib
                        export LD_LIBRARY_PATH=${WORKSPACE}/zlib-1.2.11/lib:${LD_LIBRARY_PATH}
                        export CPATH=${WORKSPACE}/zlib-1.2.11/include:${CPATH}
                        export LIBRARY_PATH=${WORKSPACE}/zlib-1.2.11/lib:${LIBRARY_PATH}
        
                        # Download and install libjpeg-turbo
                        wget https://downloads.sourceforge.net/libjpeg-turbo/libjpeg-turbo-2.1.3.tar.gz
                        tar -xvzf libjpeg-turbo-2.1.3.tar.gz
                        cd libjpeg-turbo-2.1.3
        
                        # Use CMake to configure and build libjpeg-turbo
                        mkdir build
                        cd build
                        cmake -G"Unix Makefiles" -DCMAKE_INSTALL_PREFIX=${WORKSPACE}/local ..
                        make
                        make install
        
                        # Download and install freetype
                        wget https://download.savannah.gnu.org/releases/freetype/freetype-2.11.0.tar.gz
                        tar -xvzf freetype-2.11.0.tar.gz
                        cd freetype-2.11.0
                        ./configure --prefix=${WORKSPACE}/local
                        make
                        make install
                    '''
                }
            }
        }

        stage('Install Python Dependencies') {
            steps {
                script {
                    echo "Creating and activating a Python virtual environment..."
                    sh """
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install --upgrade pip
                        pip install pillow==8.4.0
                        pip install 'pymongo[srv]' openai matplotlib pandas
                        echo "Python dependencies installed successfully."
                    """
                }
            }
        }

        stage('Generate Reports') {
            steps {
                script {
                    echo "Generating reports..."
                    sh """
                        . venv/bin/activate
                        python3 generate_report.py \
                        --mongodb_uri "${params.MONGODB_URI}" \
                        --database "${params.DATABASE}" \
                        --collections "${params.COLLECTIONS}" \
                        --openai_api_key "${params.OPENAI_API_KEY}" \
                        --report_dir "${params.REPORT_DIR}" \
                        --rate_limit_delay "${params.RATE_LIMIT_DELAY}"
                    """
                }
            }
        }

        stage('Send Email') {
            steps {
                script {
                    echo "Sending email with reports..."
                    sh """
                        . venv/bin/activate
                        python3 send_email.py \
                        --email_from "${params.EMAIL_FROM}" \
                        --email_password "${params.EMAIL_PASSWORD}" \
                        --email_to "${params.EMAIL_TO}" \
                        --report_dir "${params.REPORT_DIR}"
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Reports generated and email sent successfully!"
        }
        failure {
            echo "Failed to generate reports or send email. Check logs for errors."
        }
    }
}