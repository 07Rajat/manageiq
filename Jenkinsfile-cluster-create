pipeline {
    agent any

    parameters {
        string(name: 'IBM_API_KEY', defaultValue: '', description: 'IBM Cloud API key')
        string(name: 'REPO_URL', defaultValue: 'https://github.com/your-username/terraform-repo.git', description: 'Git repository URL for Terraform code')
        string(name: 'TEAM_NAME', defaultValue: 'Squad_Dev', description: 'Enter the Team Name')
        string(name: 'DB_NAME', defaultValue: 'Squads', description: 'Enter the Database Name')
        string(name: 'MongoURL', defaultValue: 'mongodb+srv://username:password.sm7ns.mongodb.net/?retryWrites=true&w=majority&appName=manageiq', description: 'Enter the Mongodb URL')
        string(name: 'REQUESTED_CPU', defaultValue: '64', description: 'Requested CPU')
        string(name: 'REQUESTED_MEMORY', defaultValue: '256', description: 'Requested Memory (GB)')
    }

    stages {
        stage('Checkout Code') {
            steps {
                    git branch: 'rn_clustercreation', credentialsId: 'GHE-PAT', url: "https://github.com/07Rajat/terraform-repo.git"
            }
        }

        stage('Fetch Resource Allocation') {
            steps {
                script {
                    def teamName = ${params.TEAM_NAME}
                    def requestedCPU = ${params.REQUESTED_CPU}.toInteger()
                    def requestedMemory = ${params.REQUESTED_MEMORY}.toInteger()
                    
                    // Run the Python script to fetch data
                    def fetchCommand = "python3 ./manageiq-jobs/scripts/fetch_resources.py ${params.DB_NAME} ${params.teamName} ${params.MONGODB_URI}"
                    def fetchOutput = sh(script: fetchCommand, returnStdout: true).trim()
                    
                    // Parse JSON output from Python script
                    def resourceData = readJSON(text: fetchOutput)
                    
                    if (resourceData.error) {
                        error "Error: ${resourceData.error}"
                    }
                    
                    def allocatedCPU = resourceData.allocated_cpu.toInteger()
                    def allocatedMemory = resourceData.allocated_memory_gb.toInteger()

                    // Compare Requested vs Allocated
                    if (requestedCPU > allocatedCPU || requestedMemory > allocatedMemory) {
                        error "Error: Requested resources exceed allocation! (Requested: ${requestedCPU} CPU, ${requestedMemory} GB RAM, Available: ${allocatedCPU} CPU, ${allocatedMemory} GB RAM)"
                    }

                    echo "Resources available. Proceeding with Terraform..."
                }
            }
        }

        // stage('Run Create Cluster Script') {
        //     steps {
        //         script {

        //             // Execute the script with parameters
        //             sh """
        //             chmod +x ./manageiq-jobs/scripts/scripts/create-cluster.sh
        //             ./manageiq-jobs/scripts/scripts/create_cluster.sh --ibm-api-key ${IBM_API_KEY} --repo-url ${REPO_URL}
        //             """
        //         }
        //     }
        // }
    }

    // post {
    //     success {
    //         echo "Cluster creation completed successfully!"
    //     }
    //     failure {
    //         echo "Cluster creation failed. Check the logs for details."
    //     }
    // }
}